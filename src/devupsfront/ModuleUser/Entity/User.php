<?php
// user \dclass\devups\model\Model;

/**
 * @Entity @Table(name="user")
 * */
class User extends UserCore implements JsonSerializable, NotificationSerialize
{

    public static $currentid;
    /**
     * @Id @GeneratedValue @Column(type="integer")
     * @var int
     * */
    protected $id;

    /**
     * @Column(name="profile", type="string", length=255 , nullable=true )
     * @var string
     **/
    protected $profile;

    /**
     * @Column(name="birthdate", type="date", nullable=true )
     * @var string
     **/
    protected $birthdate;

    /**
     * @Column(name="available", type="integer", nullable=true )
     * @var string
     **/
    protected $available;

    /**
     * @ManyToOne(targetEntity="\Country")
     * @JoinColumn(onDelete="set null")
     * @var \Country
     */
    public $country;

    /**
     * rate of the user as a client
     * @Column(name="rate", type="integer", nullable=true  )
     * @var integer
     **/
    protected $rate;

    /**
     * rate of the user as a client
     * @Column(name="nb_rate", type="integer", nullable=true  )
     * @var integer
     **/
    protected $nb_rate;

    /**
     * @Column(name="canpublish", type="integer" , nullable=true)
     * @var string
     **/
    protected $canpublish = 0;
    /**
     * @Column(name="avatar", type="text" , nullable=true)
     * @var string
     **/
    protected $avatar ;
    /**
     * @Column(name="currency_iso", type="string", length=5 , nullable=true)
     * @var string
     **/
    protected $currency_iso = 0;
    /**
     * @Column(name="config", type="text", nullable=true)
     * @var string
     **/
    protected $config = "{}";

    /**
     * @ManyToOne(targetEntity="\Status")
     * @var \Status
     */
    public $status;
    /**
     * @Column(name="address", type="string", length=255 , nullable=true )
     * @var string
     **/
    protected $address;
    /**
     * @Column(name="city", type="string", length=55 , nullable=true )
     * @var string
     **/
    protected $city;
    /**
     * @Column(name="bio", type="text" , nullable=true )
     * @var string
     **/
    protected $bio;

    /**
     * @Column(name="website", type="string", length=55 , nullable=true )
     * @var string

    protected $website; **/
    /**
     * @Column(name="cp", type="string", length=25 , nullable=true )
     * @var string
     **/
    protected $cp;
    /**
     * @Column(name="devices", type="text" , nullable=true )
     * @var string
     **/
    protected $devices;

    /**
     * @ManyToOne(targetEntity="\Wallet")
     * @JoinColumn(onDelete="set null")
     * @var \Wallet
     */
    public $wallet;
    public function __construct($id = null)
    {

        if ($id) {
            $this->id = $id;
        }

        $this->status = new Status();
        $this->country = new Country();
        $this->wallet = new Wallet();

    }

    public function getId()
    {
        return $this->id;
    }

    public function setConfirm($confirm)
    {

        if ($this->getPassword() != md5($confirm))
            return t("Mot de passe incorrect. veuillez reessayer svp!");

    }

    public function setResetpassword($value)
    {
        if ($value)
            $this->password = sha1($value);
    }

    /**
     * @return string
     */
    public function getSpacekolaRef()
    {
        return $this->spacekola_ref;
    }

    /**
     * @param string $spacekola_ref
     */
    public function setSpacekola_ref($spacekola_ref)
    {
        $this->spacekola_ref = $spacekola_ref;
    }

    /**
     * @return Status
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * @param Status $status
     */
    public function setStatus(Status $status)
    {
        $this->status = $status;
    }


    public function setUpdatePassword($pwd)
    {
        if ($pwd)
            $this->password = (sha1($pwd));
    }

    public function setCountry_iso($iso_code)
    {
        $this->country = Country::getbyattribut("iso", $iso_code);
    }

    public function setActivationcode($activationcode)
    {

        $this->activationcode = sha1($activationcode);
        $this->activationcode_expired_at = date("Y-m-d H:i:s", strtotime("+3 hours", strtotime(date("Y-m-d H:i:s"))));

    }


    public static function sanitizePhonenumber($phonenumber, $phone_code)
    {
        $telephone = str_replace("+" . $phone_code, "", "+" . $phonenumber);
        return str_replace("+", "", $telephone);
    }

    public function srcProfile($p = '')
    {
        return Dfile::show($p . $this->profile, 'user');
    }

    public function __delete($exec = true)
    {

        if ($this->profile) {
            Dfile::deleteFile($this->profile, 'user');
            Dfile::deleteFile('50_' . $this->profile, 'user');
        }
        return parent::__delete($exec); // TODO: Change the autogenerated stub
    }

    /**
     * @return \User
     */
    public static function userapp()
    {
        if (isset($_SESSION['USERID']))
            return User::find($_SESSION['USERID']);

        return new \User();
    }

    public function updateSession()
    {
        $_SESSION['USER'] = serialize(User::find($this->id));
    }

    public function isActivated()
    {
        return boolval((int)$this->is_activated);
    }

    /**
     * return the phonenumber with the country phone code.
     * @return string
     */
    public function getTelephone()
    {
        return $this->country->getPhonecode() . $this->phonenumber;
    }

    public function notificationData()
    {
        return [
            'firstname' => $this->firstname,
            //'spacekola_ref' => $this->spacekola_ref,
            'lastname' => $this->lastname,
            'email' => $this->email,
        ];
    }

    public function activateaccount($activationcode, $url = "")
    {
        if ($this->isActivated())
            return ["success" => true, "url" => route('home')];
        else {
            $code = sha1($activationcode);
            if ($code == $this->activationcode) {
                //if (substr($code, 0, 5) == $appuser->getActivationcode()) {

                $this->is_activated = (1);
                //$appuser->setLocked(false);
                $this->__update();
                //updatesession($appuser);
                $_SESSION[USERAPP] = serialize($this);

                return ["success" => true, "url" => $url];
            }
        }

        return [
            "success" => false,
            'detail' => t("Le code d'activation n'est pas valide. Veuillez entrer de nouveau ou alors renvoyer un autre code")
        ];

    }

    public function uploadProfile($file = "profile")
    {

        $dfile = self::Dfile($file);
        if (!$dfile->errornofile) {

            $filedir = "user/";
            if ($this->profile) {
                Dfile::deleteFile($this->profile, 'user');
                Dfile::deleteFile('50_' . $this->profile, 'user');
            }
            $url = $dfile
                ->hashname()
                //->saveoriginal(false)
                ->addresize([50, 50], "50_")
                ->addresize([150, 150], "")
                ->moveto($filedir);

            if (!$url['success']) {
                return array('success' => false,
                    'error' => $url);
            }

            $this->profile = $url['file']['hashname'];
            if ($this->id) {
                $this->__update();
            }

        }

    }


    public function showProfile()
    {
        $url = Dfile::show($this->profile, "user");
        return Dfile::fileadapter($url, "user");
    }


    public function dataSerialize()
    {
        return [
            'id' => $this->id,
            'firstname' => $this->firstname,
            'lastname' => $this->lastname,
        ];
    }

    function setConfig($config)
    {
        $this->config = json_encode($config);
    }

    public function getConfig(){
        $config = json_decode($this->config);
        if(!isset($config->buyauto))
            return [
                'buyauto' => false,
            ];

        return [
            'buyauto' => $config->buyauto,
        ];
    }

    function userdata()
    {
        return [
            'id' => (int) $this->id,
            'firstname' => $this->firstname,
            'lastname' => $this->lastname,
            'username' => $this->username,
            'country' => $this->_country,
            'avatar' => $this->avatar,
            'city' => $this->city,
            'cp' => $this->cp,
            'bio' => $this->bio,
            'birthdate' => $this->birthdate,
            'address' => $this->address,
            'is_activated' => (int) $this->is_activated,
            'currency_iso' => $this->currency_iso,
            'config' => $this->getConfig(),
            'profile' => $this->profile ? $this->srcProfile() : null,
            //'spacekola_ref' => $this->spacekola_ref,
        ];
    }

    public function subscriptionOngoing(){
        $sameperiod = Subscription::where(["this.user_id" => $this->id,
            // "status._key" => "ongoing"
        ])
            ->where_str(" '" . date("Y-m-d") . "' BETWEEN date_from AND date_to ", "AND")
            ->firstOrNull();

        return $sameperiod;
    }

    public function jsonSerialize()
    {
        return [
            'id' => (int) $this->id,
            'password' => $this->password,
            'firstname' => $this->firstname,
            //'spacekola_ref' => $this->spacekola_ref,
            'lastname' => $this->lastname,
            'email' => $this->email,
            'currency_iso' => $this->currency_iso,
            'country' => $this->_country,
            'phonenumber' => $this->phonenumber,
            'avatar' => $this->avatar,
            'city' => $this->city,
            'cp' => $this->cp,
            'address' => $this->address,
            'birthdate' => $this->birthdate,
            'resettingpassword' => $this->resettingpassword,
            'is_activated' => (int) $this->is_activated,
            //'activationcode' => $this->activationcode,
            //'birthdate' => $this->birthdate,
            'lang' => $this->lang,
            'username' => $this->username,
            'api_key' => $this->api_key,
            'config' => $this->getConfig(),
            'session_token' => $this->session_token,
            'wallet' => $this->_wallet,
            'nbpost' => $this->nbpost,
            'nbfollowing' => $this->nbfollowing,
            'nbfollowers' => $this->nbfollowers,
            'following' => $this->following,
            //'devices' => $this->devices,
            'subscription' => isset($this->subscription) ? $this->subscription : null,
            'profile' => $this->profile ? $this->srcProfile() : null,

        ];
    }

    public function __insert()
    {
        $this->is_activated = 0;

        parent::__insert(); // TODO: Change the autogenerated stub

        $id = Wallet::create([
            "reference"=>  "".$this->id,
            "amount"=>  0,
            "status"=>  1,
        ]);
        $this->__update([
            "wallet_id"=>$id
        ]);
        return $this->id;
    }


    public function showAction($btarray)
    {
        return "<a class='btn btn-info' href='".User::classpath('user/detail?id=').$this->id."'> Detail</a>";
    }

    public static function getdefault(){
        return User::getbyattribut("username", "3agEdition");
    }

    public function boughtItem(){
        return Chapter::select()
            ->addColumns(" (select count(*) from favorite where user_id = {$this->id} and chapter_id = this.id) AS bought ")
            //->leftjoinrecto(Favorite::class)
            //->leftjoin(Order::class, Order_item::class)
            //->where("favorite.chapter_id")
            ;
    }

    public $nbfollowers = 0;
    public $nbfollowing = 0;
    public $follow_back = 0;
    public $following = 0;
    public $nbpost = 0;

    public static function find($id, $id_lang = null, $qb = null)
    {
        if ($id)
            $qb = self::addColumns(' (select count(*) from follow where user_id = this.id) as nbfollowers ')
                ->addColumns(', (select count(*) from follow where follower_id = this.id) as nbfollowing ')
                ->addColumns(", (select count(*) from `post` where user_id = $id) as nbpost ")
            ;
        $user_id = Request::get("user_id");
        if ($user_id && $user_id != $id) {
            $qb //->addColumns(", (select count(*) from follow where follower_id = $id and user_id = {$user_id} ) as following ")
            ->addColumns(", f.notify as following, f.follow_back ")
                ->leftJoinOn('follow', 'f', " f.user_id = $id and f.follower_id = {$user_id} ");
        }

        return parent::find($id, $id_lang, $qb);
    }

}
