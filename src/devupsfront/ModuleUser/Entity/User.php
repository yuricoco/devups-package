<?php
// user \dclass\devups\model\Model;

/**
 * @Entity @Table(name="user")
 * */
class User extends UserCore implements JsonSerializable, NotificationSerialize
{

    /**
     * @Id @GeneratedValue @Column(type="integer")
     * @var int
     * */
    protected $id;

    /**
     * @Column(name="profile", type="string", length=255 , nullable=true )
     * @var string
     **/
    protected $profile;

    /**
     * @Column(name="available", type="integer", nullable=true )
     * @var string
     **/
    protected $available;

    /**
     * @ManyToOne(targetEntity="\Country")
     * @JoinColumn(onDelete="set null")
     * @var \Country
     */
    public $country;

    /**
     * @Column(name="address", type="string", length=255 , nullable=true )
     * @var string
     **/
    protected $address;

    public function __construct($id = null)
    {

        if ($id) {
            $this->id = $id;
        }

        $this->country = new Country();
    }

    public function getId()
    {
        return $this->id;
    }

    public function setConfirm($confirm)
    {

        if ($this->getPassword() != sha1($confirm))
            return t("Mot de passe incorrect. veuillez reessayer svp!");

    }

    public function setResetpassword($value)
    {
        if ($value)
            $this->password = sha1($value);
    }

    public function setUpdatePassword($pwd)
    {
        if ($pwd)
            $this->password = (sha1($pwd));
    }

    public function setCountry_iso($iso_code)
    {
        $this->country = Country::getbyattribut("iso", $iso_code);
    }

    public function setActivationcode($activationcode)
    {

        $this->activationcode = sha1($activationcode);
        $this->activationcode_expired_at = date("Y-m-d H:i:s", strtotime("+3 hours", strtotime(date("Y-m-d H:i:s"))));

    }


    public static function sanitizePhonenumber($phonenumber, $phone_code)
    {
        $telephone = str_replace("+" . $phone_code, "", "+" . $phonenumber);
        return str_replace("+", "", $telephone);
    }

    public function srcProfile($p = '')
    {
        return Dfile::show($p . $this->profile, 'user');
    }

    public function __delete($exec = true)
    {

        if ($this->profile) {
            Dfile::deleteFile($this->profile, 'user');
            Dfile::deleteFile('50_' . $this->profile, 'user');
        }
        return parent::__delete($exec); // TODO: Change the autogenerated stub
    }

    /**
     * @return \User
     */
    public static function userapp()
    {
        if (isset($_SESSION['USERID']))
            return User::find($_SESSION['USERID']);

        return new \User();
    }

    public function updateSession()
    {
        $_SESSION['USER'] = serialize(User::find($this->id));
    }

    public function isActivated()
    {
        return boolval((int)$this->is_activated);
    }

    /**
     * return the phonenumber with the country phone code.
     * @return string
     */
    public function getTelephone()
    {
        return $this->country->getPhonecode() . $this->phonenumber;
    }

    public function notificationData()
    {
        return [
            'firstname' => $this->firstname,
            //'spacekola_ref' => $this->spacekola_ref,
            'lastname' => $this->lastname,
            'email' => $this->email,
        ];
    }

    public function activateaccount($activationcode, $url = "")
    {
        if ($this->isActivated())
            return ["success" => true, "url" => route('home')];
        else {
            $code = sha1($activationcode);
            if ($code == $this->activationcode) {
                //if (substr($code, 0, 5) == $appuser->getActivationcode()) {

                $this->is_activated = (1);
                //$appuser->setLocked(false);
                $this->__update();
                //updatesession($appuser);
                $_SESSION[USERAPP] = serialize($this);

                return ["success" => true, "url" => $url];
            }
        }

        return [
            "success" => false,
            'detail' => t("Le code d'activation n'est pas valide. Veuillez entrer de nouveau ou alors renvoyer un autre code")
        ];

    }

    public function uploadProfile($file = "profile")
    {

        $dfile = self::Dfile($file);
        if (!$dfile->errornofile) {

            $filedir = "user/";
            if ($this->profile) {
                Dfile::deleteFile($this->profile, 'user');
                Dfile::deleteFile('50_' . $this->profile, 'user');
            }
            $url = $dfile
                ->hashname()
                //->saveoriginal(false)
                ->addresize([50, 50], "50_")
                ->addresize([150, 150], "")
                ->moveto($filedir);

            if (!$url['success']) {
                return array('success' => false,
                    'error' => $url);
            }

            $this->profile = $url['file']['hashname'];
            if ($this->id) {
                $this->__update();
            }

        }

    }


    public function showProfile()
    {
        $url = Dfile::show($this->profile, "user");
        return Dfile::fileadapter($url, "user");
    }


    public function dataSerialize()
    {
        return [
            'id' => $this->id,
            'firstname' => $this->firstname,
            'lastname' => $this->lastname,
        ];
    }


    function userdata()
    {
        return [
            'id' => (int) $this->id,
            'firstname' => $this->firstname,
            'lastname' => $this->lastname,
            'username' => $this->username,
            'is_activated' => (int) $this->is_activated,
            'profile' => $this->profile ? $this->srcProfile() : null,
        ];
    }

    public function jsonSerialize()
    {
        return [
            'id' => (int) $this->id,
            'password' => $this->password,
            'firstname' => $this->firstname,
            'lastname' => $this->lastname,
            'email' => $this->email,
            'country' => $this->_country,
            'phonenumber' => $this->phonenumber,
            'resettingpassword' => $this->resettingpassword,
            'is_activated' => (int) $this->is_activated,
            'lang' => $this->lang,
            'username' => $this->username,
            'profile' => $this->profile ? $this->srcProfile() : null,
        ];
    }

    public function __insert()
    {
        $this->is_activated = 0;

        parent::__insert(); // TODO: Change the autogenerated stub

        return $this->id;
    }


    public function showAction($btarray)
    {
        return "<a class='btn btn-info' href='".User::classpath('user/detail?id=').$this->id."'> Detail</a>";
    }


}
